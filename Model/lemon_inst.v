// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Generated by Quartus Prime Version 16.0 (Build Build 211 04/27/2016)
// Created on Sun Sep 30 15:03:49 2018

lemon lemon_inst
(
	.CLK_50M(CLK_50M_sig) ,	// input  CLK_50M_sig
	.CLK_IN(CLK_IN_sig) ,	// input  CLK_IN_sig
	.CLK_OUT(CLK_OUT_sig) ,	// output  CLK_OUT_sig
	.RST_N(RST_N_sig) ,	// input  RST_N_sig
	.SW(SW_sig) ,	// input [1:0] SW_sig
	.LED(LED_sig) ,	// output [3:0] LED_sig
	.DRAM_DQ(DRAM_DQ_sig) ,	// inout [15:0] DRAM_DQ_sig
	.DRAM_ADDR(DRAM_ADDR_sig) ,	// output [11:0] DRAM_ADDR_sig
	.DRAM_DQM(DRAM_DQM_sig) ,	// output [1:0] DRAM_DQM_sig
	.DRAM_WE_N(DRAM_WE_N_sig) ,	// output  DRAM_WE_N_sig
	.DRAM_CAS_N(DRAM_CAS_N_sig) ,	// output  DRAM_CAS_N_sig
	.DRAM_RAS_N(DRAM_RAS_N_sig) ,	// output  DRAM_RAS_N_sig
	.DRAM_CS_N(DRAM_CS_N_sig) ,	// output  DRAM_CS_N_sig
	.DRAM_BA(DRAM_BA_sig) ,	// output [1:0] DRAM_BA_sig
	.DRAM_CLK(DRAM_CLK_sig) ,	// output  DRAM_CLK_sig
	.DRAM_CKE(DRAM_CKE_sig) ,	// output  DRAM_CKE_sig
	.FLASH_DATA(FLASH_DATA_sig) ,	// inout [7:0] FLASH_DATA_sig
	.FLASH_ADDR(FLASH_ADDR_sig) ,	// output [21:0] FLASH_ADDR_sig
	.FLASH_WR_N(FLASH_WR_N_sig) ,	// output  FLASH_WR_N_sig
	.FLASH_SEL_N(FLASH_SEL_N_sig) ,	// output  FLASH_SEL_N_sig
	.FLASH_RD_N(FLASH_RD_N_sig) ,	// output  FLASH_RD_N_sig
	.Flash_WP(Flash_WP_sig) ,	// output  Flash_WP_sig
	.Flash_RST_N(Flash_RST_N_sig) ,	// output  Flash_RST_N_sig
	.Flash_BYTE(Flash_BYTE_sig) ,	// output  Flash_BYTE_sig
	.LCD_DATA(LCD_DATA_sig) ,	// inout [15:0] LCD_DATA_sig
	.LCD_RS(LCD_RS_sig) ,	// output  LCD_RS_sig
	.LCD_RST_N(LCD_RST_N_sig) ,	// output  LCD_RST_N_sig
	.LCD_CS_N(LCD_CS_N_sig) ,	// output  LCD_CS_N_sig
	.LCD_RD_N(LCD_RD_N_sig) ,	// output  LCD_RD_N_sig
	.LCD_WR_N(LCD_WR_N_sig) ,	// output  LCD_WR_N_sig
	.TOUCH_INT(TOUCH_INT_sig) ,	// input  TOUCH_INT_sig
	.TOUCH_RST_N(TOUCH_RST_N_sig) ,	// output  TOUCH_RST_N_sig
	.TOUCH_SDA(TOUCH_SDA_sig) ,	// inout  TOUCH_SDA_sig
	.TOUCH_SCL(TOUCH_SCL_sig) ,	// output  TOUCH_SCL_sig
	.KEY(KEY_sig) ,	// input [3:0] KEY_sig
	.SW1(SW1_sig) ,	// input  SW1_sig
	.SW2(SW2_sig) ,	// input  SW2_sig
	.SW_CODE(SW_CODE_sig) ,	// input  SW_CODE_sig
	.SW_CODE_L(SW_CODE_L_sig) ,	// input  SW_CODE_L_sig
	.SW_CODE_R(SW_CODE_R_sig) ,	// input  SW_CODE_R_sig
	.GPIO_PA(GPIO_PA_sig) ,	// inout [15:0] GPIO_PA_sig
	.GPIO_PB(GPIO_PB_sig) ,	// inout [15:0] GPIO_PB_sig
	.GPIO_P6(GPIO_P6_sig) 	// inout [39:0] GPIO_P6_sig
);

