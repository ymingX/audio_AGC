/*
 * fft.c
 *
 *  Created on: 2018年11月27日
 *      Author: 14409
 */
/*
 * fft.c
 *
 *  Created on: 2017年3月25日
 *      Author: shuai
 */

#include "fft.h"
#include "lcd.h"
#include "touch.h"
#include "key.h"
#include "ctrl.h"



///////////fft总控制///////////////
u16 j=0;
char times = 1;
char record_id = 0;
float record_v[5][10] = {0};
unsigned short record_p[3][10] = {0};
unsigned short dist;//   fft的分辨率

void FFTCtrl(){
	j=0;
	FFT_FIFOCtrl();
	usleep(1000);
	FFT_RAMCtrl();
}
///////////fft fifo控制///////////////
void FFT_FIFOCtrl(){
	IOWR(FFT_TOP_BASE, fft_fifo_rd, 1);
	while((IORD(FFT_TOP_BASE, fft_fifo_rdem)&0x0001)==0){}
	IOWR(FFT_TOP_BASE, fft_fifo_rd, 0);

	IOWR(FFT_TOP_BASE, fft_fifo_wr, 1);
	while((IORD(FFT_TOP_BASE, fft_fifo_wrfu)&0x0001)==0){}
	IOWR(FFT_TOP_BASE, fft_fifo_wr, 0);

	IOWR(FFT_TOP_BASE, fft_fifo_rd, 1);
	while((IORD(FFT_TOP_BASE, fft_fifo_rdem)&0x0001)==0){}
	IOWR(FFT_TOP_BASE, fft_fifo_rd, 0);
}
///////////fft ram控制///////////////

int stop1=0;
void FFT_RAMCtrl(){
	u16 i;
	u16 i_pos;
	u32 rddata;
//	int unfreq=0;
//	int j=0;//用于排序算法
//	int N=512;
//	float shuju[512]={0};
	//	int m;
	float data, power;
	float sum = 0, sum0 = 0;
	unsigned short j, k, p = 1;


	int exp;
	IOWR(FFT_TOP_BASE, fft_ram_rd, 1);
	exp = (IORD(FFT_TOP_BASE, fft_exp)) & 0x003F;
	if(exp >= 32)
		exp = exp - 64;
//	printf("exp: %d\n", exp);

	if(model==4)
		dist=20;
	else
		dist=50;

	for(i = -1; ++i < 10;)
	{
		record_p[0][i] = 0;
		record_v[0][i] = 0;
	}

	for(i = 0; i < 512; i++){
		IOWR(FFT_TOP_BASE, fft_ram_rdad, i);
		rddata = IORD(FFT_TOP_BASE, fft_ram_rdda);
		FFTData[i] = 1.0 * sqrt((int)rddata) * pow(2, -exp) / 2000;
		//printf("%f\n",FFTData[i]);
		if((data = FFTData[i] / 0.416 ) >= 75){
			for(j = 1; j <= p+1 && j < 10; j++)
				if (data > record_v[0][j])
				{
					for(k = ++p; --k > j;)
						if(k < 10)
						{
							record_v[0][k] = record_v[0][k - 1];
							record_p[0][k] = record_p[0][k - 1];
						}
					record_v[0][j] = data; record_p[0][j] = i;
					break;
				}
			sum0 += data * data / 2000 / 50;
		}

	}//一次fft到此结束，各种操作需要在里面完成

	if(times-- < 0 && !pause1)
	{
		times = 10;
		lcdRectClear(100, 150, 500, 500, BACKGROUND);
		lcdDispFloatBig(450, 50, BLACK, WHITE, sum0, 2);

		record_v[0][0] = sum0 = sum0 * 0.95;
		for(i = 0; data = record_v[0][++i];){
			lcdDispDecBig(100, 120+30*i, BLACK, WHITE, record_p[0][i] * dist);
			lcdDispFloatBig(250, 120+30*i, BLACK, WHITE, data, 2);
			lcdDispFloatBig(400, 120+30*i, BLACK, WHITE, power = data * data / 2000 / 50, 2);
			if((sum += power) > sum0) break;
		}
		record_p[0][0] = i;

		for(j = 5; --j;)
			for(i = -1; ++i <= record_p[j-1][0];)
			{
				record_v[j][i] = record_v[j-1][i];
				record_p[j][i] = record_p[j-1][i];
			}
	}

     IOWR(FFT_TOP_BASE, fft_ram_rd, 0);
}

void convolution()
{
	//rd时序
	int rd;
	int conv[1024]={0};
	int i=0;
	while(1){
		rd=!IORD(PIO_WRIN_BASE, 0);//rd为0代表读入状态
		printf("%d\n",rd);
		if(rd==1){
			IOWR(PIO_RDCTRL_BASE, 1, 2);//请求读入

	    for(i=0;IORD(PIO_WRIN_BASE, 0)==0;i++){
			IOWR(PIO_RDCTRL_BASE, 0, 0);   //拉时钟
			IOWR(PIO_RDCTRL_BASE, 0, 1);
			IORD(PIO_RDDATAIN_BASE, 0);    //读数据
			}
		   }
	}

//即得到数据

}




